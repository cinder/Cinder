/**
\class cinder::SurfaceT
\details
A Surface always contains red, green and blue data, along with an optional alpha channel.<br>
<br>
Surfaces come in two primary configurations, the traditional 8-bits per channel represented by \ref cinder::Surface8u "Surface8u", and a float per channel,
suitable for high dynamic range images, represented by \ref cinder::Surface32f "Surface32f". \em Surface is a short-hand synonym for \em Surface8u. <br>
<br>
Surfaces are a CPU-based image representation, and must be converted appropriately to be drawn using the GPU. For example,
to be used with OpenGL, the \ref cinder::gl::Texture "gl::Texture" is a natural choice, and it can be constructed directly from a Surface.<br>
<br>
To manipulate individual pixels of a Surface, the \ref SurfaceT::Iter "Surface::Iter" class can be used.<br>
<br>
To allocate a Surface that is 640x480 and has an alpha channel, use:<br>
<tt>Surface mySurface( 640, 480, true );</tt><br>
A Surface can be created from an image file using the result of loadImage():<br>
<tt>Surface bitmap( loadImage( "image.jpg" ) );</tt><br>
<br>
The pixels of each row of a Surface are stored in contiguous memory, and the start of each row is offset from the previous by the stride (measured in bytes) returned
by \ref cinder::SurfaceT::getRowBytes "getRowBytes()". Pixels can be ordered in memory in a number of configurations, specified using the SurfaceChannelOrder class.
\sa
\ref guide_Images "Images in Cinder"
*/

/**
\class cinder::SurfaceT::Iter
\details
The Iter class can be used to walk the pixels of a Surface using a nested for-loop, where the outer loop calls
\ref SurfaceT::Iter::line() "line()", and the inner calls \ref SurfaceT::Iter::pixel() "pixel()".<br>
The code below implements an invert on the Area \a area of \a surface:<br>
\code
Surface::Iter iter = surface.getIter( area );
while( iter.line() ) {
	while( iter.pixel() ) {
		iter.r() = 255 - iter.r();
		iter.g() = 255 - iter.g();
		iter.b() = 255 - iter.b();
	}
}
\endcode

In addition to r(), g(), b() and a(), the Iter provides accessors which accept an offset in x & y relative to the current location:
\code
inputIter.r(1, 1); // will return the red value of the pixel to the lower right of the current pixel
inputIter.b(0, -1); // will return the blue value of the pixel directly above the current pixel
\endcode

A final family accessors, rClamped(), gClamped(), bClamped() and aClamped() also accept an x & y relative offset, but will not sample
outside of the bounds of the iterator.
\code
inputIter.rClamped(-2,0); // when called on the left edge of a row,
						  //this will simply return the left-most pixel's red value
\endcode
\sa
\ref guide_Images "Images in Cinder"
*/

/**
\class cinder::SurfaceT::ConstIter
\details
The ConstIter class can be used to walk the pixels of a Surface using a nested for-loop, where the outer loop calls
\ref SurfaceT::ConstIter::line() "line()", and the inner calls \ref SurfaceT::ConstIter::pixel() "pixel()".<br>
The code below finds the maximum red value in the Area \a area of \a surface:<br>
\code
Surface::ConstIter iter = surface.getIter( area );
uint8_t maxRed = 0;
while( iter.line() ) {
	while( iter.pixel() ) {
		if( iter.r() > maxRed )
			maxRed = iter.r();
	}
}
\endcode
In addition to r(), g(), b() and a(), the Iter provides accessors which accept an offset in x & y relative to the current location:
\code
inputIter.r(1, 1); // will return the red value of the pixel to the lower right of the current pixel
inputIter.b(0, -1); // will return the blue value of the pixel directly above the current pixel
\endcode

A final family accessors, rClamped(), gClamped(), bClamped() and aClamped() also accept an x & y relative offset, but will not sample
outside of the bounds of the iterator.
\code
inputIter.rClamped(-2,0); // when called on the left edge of a row,
						  //this will simply return the left-most pixel's red value
\endcode
\sa
\ref cinder::SurfaceT::Iter<br>
\ref guide_Images "Images in Cinder"
*/
