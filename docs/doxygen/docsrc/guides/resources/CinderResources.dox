/*! \page CinderResources Assets & Resources in Cinder
\section intro Introduction
Most applications need to reference data outside their own code to do anything very interesting. Cinder offers two mechanisms for including data files with your app: \e assets and \e resources. These two techniques have a lot in common. The main difference is that resources are "baked" directly into your application, and assets are separate files living alongside your application. Assets can be easily modified separately from your code, and they take a lot less work to setup, especially on Windows. However, distribution and installation can be simpler with resources since there's no way for the data your application depends on to "go missing", and it reduces the chances that a user might modify your data unexpectedly.

\section layout Project File Structure
TinderBox creates a project layout with separate folders for both assets and resources. Since these files are as much a part of your app as its source code, they'll generally be managed by your version control system (say, git or Subversion) just as your C++ code or anything else in your project is.\n\n
\image html resources_file_structure.png

\n
\section assets Assets
Assets are quite simple to use. Simply place any file you'd like to reference from your application into the \e assets folder that TinderBox has created for you. To access this file from your code, you'll want to call \ref cinder::app::App::loadAsset "loadAsset()". This is a member function of your App, but if you'd like to call it from outside your App, call the \ref cinder::app::loadAsset "app::loadAsset()" variant. The function takes one parameter, which is the simply the name of the file you'd like to use. For example, to load a PNG file as a gl::Texture from your assets folder, you'd do something like this:
\code
mTexture = loadImage( loadAsset( "logo.png" ) );
\endcode
\n
Additionally, if you need to know where an asset lives in the filesystem, you can call \ref cinder::app::App::getAssetPath "getAssetPath()".
\code
console() << "logo.png lives at: " << getAssetPath( "logo.png" ) << std::endl;
// prints: "logo.png lives at /Users/andrewbell/SampleProject/assets/logo.png"
\endcode
\n
You can also provide additional structure to your \e assets folder. For example, you might create a \e pictures subfolder that contains a \e photo1.jpg. You would load that like so:
\code
mPhoto1 = loadImage( loadAsset( "pictures/photo1.jpg" ) );
\endcode
\n

\subsection shippingAssets How Assets Work
It's worth understanding a bit about how assets work under the hood. The first time you attempt to load an asset or get its path, your Cinder application automatically attempts to find its \e assets directory. It begins by searching in the same folder in which your .app bundle or .exe lives. Next it searches its parent, on up 5 levels. The reason for such a deep search is due to the somewhat remote location where XCode and Visual C++ can output executables, depending on their configuration. When you are ready to ship your application, make sure you include both your application (.app on the Mac or .exe on Windows) and its assets folder. Note that if you are not using any assets, Cinder does not require the existence of an assets folder.
\n\n

\subsection assetsIOs Assets on iOS
iOS applications of course cannot require a separate folder at runtime. However TinderBox-generated iOS applications automatically include their \e assets folder in their application's bundle, and the asset-discovery mechanism in Cinder on iOS knows to look here.
\n\n

\subsection assetsExternal Additional Asset Folders
While Cinder will automatically look for a specific folder as the "official" assets directory, users can use \ref cinder::app::App::addAssetDirectory "addAssetDirectory()" in order to offer supplemental paths for searching for assets. \ref cinder::app::App::loadAsset "loadAsset()" and \ref cinder::app::App::getAssetPath "getAssetPath()" will search the official assets folder first, followed by any supplemental asset directories the user may have provided.
\n\n

That's all there is to know about assets. If you're a beginner with Cinder, this is probably the easiest technique for including data with your application. However it's worth being aware of how to use resources as well. While they're a bit more cumbersome to use, resources allow you to create applications which are entirely self-contained.
\n

\section mac Resources on Mac OS X & iOS
Under Mac OS X as well as iOS, resources are just normal files which are contained inside the application bundle. If you haven't before, try opening up one of these bundles yourself. Context-click (right-click or control-click) an application in your \e Applications folder and choose <b>Show Package Contents</b>. Here's the results of doing this with iTunes:\n\n
\image html resources_itunes_mac_show_package.png
\n\n
\image html resources_itunes_mac.png
\n
Looking around inside of the application bundle, we see a \e Resources folder inside of \e Contents. In here we can find all the data files the application depends on. As an example, the first few visible files in the screenshot are audio files iTunes plays as part of its user interface.\n
\n
A similar structure is maintained for iPhone and iPad apps, and it's the one Cinder uses for these platforms as well.
\n\n
\subsection macAdd Adding a Resource
Adding a resource to your Mac or iOS application is straightforward. Let's assume you've got an image you'd like to use in your app. The first step is to add this file as a resource in Xcode. First, pull up your project window in Xcode. Now, context-click the \e Resources folder and choose <b>Add | Existing Files...</b>.\n\n

\image html resources_mac_add_resource.png
\n
Now select the file you'd like to add to your app from the Open dialog box that follows. After choosing your file, you'll see it listed in the \e Resources group of your Xcode project. The real magic happens though when Xcode copies these files into your application bundle at build time. To confirm that this will happen, select the \e Targets tab of your project inspector and reveal your application target under the \e Targets section. You'll see a build phase called <em>Copy Bundle Resources</em> and inside that will be the resource you've just added.\n\n

\image html resources_mac_build_phase.png
\n

\subsection macUse Using a Resource
Now that we've got a resource in the application, how do we actually make use of it with Cinder code? For a Mac or iOS-only application, we simply call the loadResource() function and pass it the name of the resource as a string. The result of this function (which is a \ref cinder::DataSource "DataSourceRef", a class you won't generally need to use directly) can be passed to most Cinder functions and constructors that know how to do I/O. In the case of our logo image example, we would call loadResource() on that file and then pass it to loadImage(). Then the result of loadImage() can be used to create a \ref cinder::gl::Texture "gl::Texture" or a \ref cinder::SurfaceT "Surface" like so:
\code
gl::Texture myTexture( loadImage( loadResource( "Logo.jpg" ) ) );
Surface mySurface( loadImage( loadResource( "Logo.jpg" ) ) );
\endcode
or perhaps we want to create a QuickTime movie out of a resource called \e FlyingLogo.mov:
\code
qtime::MovieGl myMovie( loadResource( "FlyingLogo.mov" ) );
\endcode
\n
Pretty easy stuff. On the Cocoa side, that's all there is to it. In general, you can make use of the results of loadResource() about like you'd expect. However a handy function if you ever need to load a resource using a function which only accepts file paths is \ref cinder::app::App::getResourcePath "App::getResourcePath()". For example, calling this:
\code
console() << getResourcePath( "Logo.jpg" ) << endl;
\endcode
Results in something about like this:
<tt>/Users/andrewfb/Code/cinder/samples/resizeTest/xcode/build/Debug/resizeTest.app/Contents/Resources/Logo.jpg</tt>

\section msw Resources on Windows
Now let's take a look now at how resources are handled on Microsoft Windows. The most noticeable difference from the Mac is that resources are not stored as individual files, since an EXE does not encapsulate a directory like a Mac OS X application bundle does. Instead, resources are baked into the EXE using a resource compiler, and are stored as binary data. However we can access this binary data in memory using the same loadResource() routine we do on Mac OS X. Furthermore, Cinder's internal code is able to handle loading from either the flat file or in-memory representations transparently and efficiently, so in general you will not need to change application code between the platforms.
\n\n
<b>Note: </b>The text which follows is helpful for understanding how Windows resources work under the hood, but we recommend you read and consider the alternative techniques under the \ref xplatform "Cross-Platform Resources" section as well, even if you are writing Windows-only code.\n
\n
\subsection mswAdd Adding a Resource
Resources under Windows are identified by a combination of integer ID numbers and a string declaring the type of resource. The integer IDs are generally numbered starting from \c 128 though there is some flexibility here. Developers also adopt different idioms for the type string. For example, in the Cinder samples you might see \c GLSL as the type string for any OpenGL GLSL code stored as resources. In general developers will use a series of preprocessor <tt>\#define</tt>'s to create a list of unique IDs, and these should be defined in a header file which we typically create as <em>include\\%Resources.h</em>:\n
<b>%Resources.h</b>
\code
#pragma once

#define	RES_LOGO_ID             128
#define	RES_SPLASHSCREEN_ID     129
#define RES_THEME_MUSIC         130

\endcode
\n\n
Next, we will create a <em>Resources.rc</em> file, which will tell the compiler which resources we'd like to be included in our app. The structure of this file is a series of lines beginning with the unique resource ID (which we defined in <em>%Resources.h</em>), then a string declaring the resource type (again, this can be anything, but it's good to adopt a convention like assigning \c IMAGE to all of your image files) and last, the file path relative to the .rc file itself. Note that these files are C-style double-quoted strings and consequently, any backslashes must be doubled to distinguish them from escaped characters. The resource compiler walks this file, baking the data of each cited resource into the final EXE. A normal <em>Resources.rc</em> file might look like this:\n
<b>%Resources.rc</b>
\code
#include "..\include\Resources.h"

RES_LOGO_ID             IMAGE           "..\\resources\\Logo.jpg"
RES_SPLASHSCREEN_ID     IMAGE           "..\\resources\\Splashscreen.png"
RES_THEME_MUSIC_ID      MP3             "..\\resources\\Theme.mp3"

\endcode
\n
If it's not already part of your project, you'll need to add <em>Resources.rc</em> to your Visual C++ project. You can do this by right-clicking the \e Resources filter, choosing <b>Add | Existing Item...</b> and navigating to <em>Resources.rc</em>. Per the screenshot at the top of this document, we generally recommend storing this file in the same directory as your Visual C++ project, though that is not strictly necessary.\n\n
\image html resources_msw_add.png
\n
\subsection mswUse Using a Resource
So now our app has its resources baked in, but how do we use them? For Windows-only applications, we call the variant of App::loadResource() which accepts our resource ID/type combination. Just like on the Mac, the result of loadResource() can be passed directly to a function like loadImage(). Then for example, the result of loadImage() can be used to create a \ref cinder::gl::Texture "gl::Texture" or a \ref cinder::SurfaceT "Surface" like so:
\code
gl::Texture myTexture( loadImage( loadResource( RES_LOGO_ID, "IMAGE" ) ) );
Surface mySurface( loadImage( loadResource( RES_SPLASHSCREEN_ID, "IMAGE" ) ) );
\endcode
\n
\section xplatform Cross-Platform Resources
As we've seen, Mac OS X and Windows handle resources slightly differently, but Cinder provides some tools which can simplify these differences. The most straightforward way to use the same code on both platforms is to call the variant of loadResource() which accepts both a Mac file path and a Windows ID/Type combination. Cinder will automatically pay attention to the relevant parameters for the platform you are compiling on. Calling this version of loadResource() looks similar to the line below:
\code
loadResource( "Logo.jpg", RES_LOGO_ID, "IMAGE" );
\endcode
\n
However, Cinder provides some convenient capabilities which not only simplify your application code, but can consolidate the definition of the resources themselves. Let's continue the \e Logo.jpg example. We'll start with the most changed portion, which is the structure of <em>%Resources.h</em> \n
<b>%Resources.h</b>:
\code
#pragma once
#include "cinder/CinderResources.h"

#define RES_LOGO	CINDER_RESOURCE( ../resources/, Logo.jpg, 128, IMAGE )

\endcode
\n
You'll notice a couple of changes. The first is the inclusion of the file \e "cinder/CinderResources.h". This file defines the <tt>CINDER_RESOURCE</tt> macro, which breaks down as follows:\n
<tt>CINDER_RESOURCE</tt>( <em>relative path to the parent of the resource</em>,  <em>file name of the resource</em>, <em>Windows integer ID</em>, <em>Windows type</em> )\n
\n
As you can see, we use this macro to define a resource named <tt>RES_LOGO</tt>. Its path (relative to the <em>Resources.rc</em> file) is <tt>../resources/Logo.jpg</tt>, which we split into the parent and the name of the file itself with the macro. And finally, we assign our Windows ID/type combination, \c 128 for the ID and \c IMAGE for the type string. Should you need to define several resources, make sure each one is defined on its own line, and the last ends with a carriage return.
\n \n
Next, we'll look at our redefined \e Resources.rc file designed to make use of this macro:\n
\b Resources.rc:
\code
#include "..\include\Resources.h"

RES_LOGO

\endcode
\n
This file has been simplified by our new <tt>CINDER_RESOURCE</tt> macro. We simply write the name of the resource we want included in our .exe. Make sure each resource has its own line when you have multiple resources, and don't forget the carriage return on the last line.\n
\n
On the Mac OS X side of things, you'll still include your resource in the \e Resources group of your Xcode project, and confirm its presence in the <em>Copy Bundle Resources</em> build phase to be safe.\n
\n
Finally, let's look at how our application code has changed:\n
\code
#include "Resources.h"
...
gl::Texture myTexture( loadImage( loadResource( RES_LOGO ) ) );
\endcode
\n
It's about the same, except now we simply pass the resource name to loadResource() and the right thing will happen on either platform.
\n \n
That's all there is to using cross-platform resources. It can be a bit of a pain to setup initially, but it's easy to maintain once you've got it going. And while you can use either style of resource definition, we prefer the <tt>CINDER_RESOURCE</tt> technique since it's less error-prone and makes for slightly more legible application code.

*/
