#!/usr/bin/python

import os
import time
import datetime
import stat

print( "Samples Linux Build File Generate v0.001\n" )

Build = """#!/bin/sh
$<CINDER_REL_PATH>/tools/linux/cbuilder -app "$@"
"""

CMakeListsTxt= """# $<APPNAME>
cmake_minimum_required( VERSION 3.1 FATAL_ERROR )
set( CMAKE_VERBOSE_MAKEFILE on )

get_filename_component( CINDER_DIR "${CMAKE_CURRENT_SOURCE_DIR}/$<CINDER_REL_PATH>" ABSOLUTE )
include( ${CINDER_DIR}/linux/cmake/Cinder.cmake )

project( $<APPNAME> )

get_filename_component( SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../src" ABSOLUTE )
get_filename_component( INC_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../include" ABSOLUTE )

if( NOT TARGET cinder${CINDER_LIB_SUFFIX} )
    find_package( cinder REQUIRED
        PATHS ${PROJECT_SOURCE_DIR}/$<CINDER_REL_PATH>/linux/${CMAKE_BUILD_TYPE}/${CINDER_OUT_DIR_PREFIX}
        $ENV{Cinder_DIR}/linux/${CMAKE_BUILD_TYPE}/${CINDER_OUT_DIR_PREFIX}
    )
endif()

# Use PROJECT_NAME since CMAKE_PROJET_NAME returns the top-level project name.
set( EXE_NAME ${PROJECT_NAME} )

set( SRC_FILES
	$<SOURCE_FILES>
)

add_executable( "${EXE_NAME}" ${SRC_FILES} )

target_include_directories(
	"${EXE_NAME}"
	PUBLIC ${INC_DIR}
)

target_link_libraries( "${EXE_NAME}" cinder${CINDER_LIB_SUFFIX} )
"""

gCinderDir = os.path.abspath( "../../.." )
print( "Cinder Dir is at %s\n" % gCinderDir )

def get_sub_dirs( path ):
	return [name for name in os.listdir(path) if os.path.isdir(os.path.join(path, name))]
	pass

def make_linux_dir( path ):
	if not os.path.exists( path ):
		absPath = os.path.abspath( path )
		os.makedirs( absPath )
		print( "\t\tCreated %s" % path )
	pass

def write_build_file( path, cinderRelPath, dateTime ):
	text = Build.replace( "$<CINDER_REL_PATH>", cinderRelPath )
	text = text.replace( "$<DATETIME>", dateTime )

	outFile = open( path, "w" )
	outFile.write( text )
	outFile.close()

	st = os.stat( path )
	os.chmod( path, st.st_mode | stat.S_IEXEC )
	pass

def get_c_files( path ):
	files = [name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))]
	return []
	pass

def get_cpp_files( path ):
	result = []
	files = [name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))]
	for file in files:
		lc = file.lower()
		if lc.endswith( ".cpp" ) or lc.endswith( ".cc" ) or lc.endswith( ".cxx" ):
			result.append( "${SRC_DIR}/%s" % file )
		pass
	return result
	pass

def write_cmake_file( path, linuxDir, cinderRelPath, appName, dateTime ):
	text = CMakeListsTxt.replace( "$<DATETIME>", dateTime )
	text = text.replace( "$<CINDER_REL_PATH>", cinderRelPath )
	text = text.replace( "$<APPNAME>", appName )

	srcPath = os.path.join( linuxDir, "../src" )
	cFiles = get_c_files( srcPath )
	cppFiles = get_cpp_files( srcPath )

	allFiles = []
	for f in cppFiles:
		allFiles.append( f )
	
	sourceFiles = "\n\t".join( allFiles )

	text = text.replace( "$<SOURCE_FILES>", sourceFiles )

	outFile = open( path, "w" )
	outFile.write( text )
	outFile.close()
	pass


def generate_build( path, excludes ):
	print( "Generating builds for projects in %s" % (path) )
		
	subDirs = get_sub_dirs( path )
	subDirs.sort()
	for subDir in subDirs:
		if subDir in excludes:
			continue
			pass

		appDir = subDir	
		appName = subDir
		if appName.endswith( "App" ):
			appName = appName[:-3]

		linuxPath = os.path.join( path, appDir, "linux" )
		buildPath = os.path.join( linuxPath, "build" )
		cmakePath = os.path.join( linuxPath, "CMakeLists.txt" )

		cinderRelPath = os.path.relpath( gCinderDir, os.path.abspath( linuxPath ) )

		dateTime = datetime.datetime.fromtimestamp( time.time() ).strftime('%Y-%m-%d %H:%M:%S')

		print( "\t%s" % appName )
		make_linux_dir( linuxPath )
		write_build_file( buildPath, cinderRelPath, dateTime )
		write_cmake_file( cmakePath, linuxPath, cinderRelPath, appName, dateTime )

	print( "" )
	pass

generate_build( "../../../samples", [ "data", "_AllSamples", "_audio", "_opengl", "_svg", "_timeline" ] )
generate_build( "../../../samples/_audio", [ "common" ] )
generate_build( "../../../samples/_opengl", [] )
generate_build( "../../../samples/_svg", [] )
generate_build( "../../../samples/_timeline", [] )

